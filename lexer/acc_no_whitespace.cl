classCellularAutomatoninheritsIO{population_map:String;init(map:String):SELF_TYPE{{population_map<-map;self;}};print():SELF_TYPE{{out_string(population_map.concat("\n"));self;}};num_cells():Int{population_map.length()};cell(position:Int):String{population_map.substr(position,1)};cell_left_neighbor(position:Int):String{ifposition=0thencell(num_cells()-1)elsecell(position-1)fi};cell_right_neighbor(position:Int):String{ifposition=num_cells()-1thencell(0)elsecell(position+1)fi};(*acellwillliveifexactly1ofitselfandit'simmediateneighborsarealive*)cell_at_next_evolution(position:Int):String{if(ifcell(position)="X"then1else0fi+ifcell_left_neighbor(position)="X"then1else0fi+ifcell_right_neighbor(position)="X"then1else0fi=1)then"X"else"."fi};evolve():SELF_TYPE{(letposition:Intin(letnum:Int<-num_cells()in(lettemp:Stringin{whileposition<numloop{temp<-temp.concat(cell_at_next_evolution(position));position<-position+1;}pool;population_map<-temp;self;})))};};classAinheritsIO{print():SELF_TYPE{{out_string("Amethodclaled\n");self;}};};classBinheritsA{print():SELF_TYPE{{out_string("Bmethodcalled\n");self;}};};classCinheritsB{print():SELF_TYPE{{out_string("Cmethodcalled\n");self;}};};classMain{cells:CellularAutomaton;foo:C;x:Int;main():SELF_TYPE{{cells<-(newCellularAutomaton).init("X");cells.print();(letcountdown:Int<-20inwhile0<countdownloop{cells.evolve();cells.print();countdown<-countdown-1;}pool);(*endletcountdown*)foo<-(newC);foo@A.print();foo@B.print();foo@C.print();casefooofa:A=>a.print();b:B=>b.print();c:C=>c.print();esac;x<-5;x<=5;~x+~5-5*5/5;nottrue;false;isvoid(x);self;}};};
